"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PLATFORM_NAME_TVOS = exports.PLATFORM_NAME_IOS = exports.desiredCapConstraints = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumIosDriver = require("appium-ios-driver");

const PLATFORM_NAME_IOS = 'iOS';
exports.PLATFORM_NAME_IOS = PLATFORM_NAME_IOS;
const PLATFORM_NAME_TVOS = 'tvOS';
exports.PLATFORM_NAME_TVOS = PLATFORM_NAME_TVOS;

let desiredCapConstraints = _lodash.default.defaults({
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: [PLATFORM_NAME_IOS, PLATFORM_NAME_TVOS]
  },
  showXcodeLog: {
    isBoolean: true
  },
  wdaLocalPort: {
    isNumber: true
  },
  wdaBaseUrl: {
    isString: true
  },
  iosInstallPause: {
    isNumber: true
  },
  xcodeConfigFile: {
    isString: true
  },
  xcodeOrgId: {
    isString: true
  },
  xcodeSigningId: {
    isString: true
  },
  keychainPath: {
    isString: true
  },
  keychainPassword: {
    isString: true
  },
  bootstrapPath: {
    isString: true
  },
  agentPath: {
    isString: true
  },
  tapWithShortPressDuration: {
    isNumber: true
  },
  scaleFactor: {
    isString: true
  },
  usePrebuiltWDA: {
    isBoolean: true
  },
  customSSLCert: {
    isString: true
  },
  webDriverAgentUrl: {
    isString: true
  },
  derivedDataPath: {
    isString: true
  },
  launchWithIDB: {
    isBoolean: true
  },
  useNewWDA: {
    isBoolean: true
  },
  wdaLaunchTimeout: {
    isNumber: true
  },
  wdaConnectionTimeout: {
    isNumber: true
  },
  updatedWDABundleId: {
    isString: true
  },
  resetOnSessionStartOnly: {
    isBoolean: true
  },
  commandTimeouts: {},
  wdaStartupRetries: {
    isNumber: true
  },
  wdaStartupRetryInterval: {
    isNumber: true
  },
  prebuildWDA: {
    isBoolean: true
  },
  connectHardwareKeyboard: {
    isBoolean: true
  },
  calendarAccessAuthorized: {
    isBoolean: true
  },
  useSimpleBuildTest: {
    isBoolean: true
  },
  waitForQuiescence: {
    isBoolean: true
  },
  maxTypingFrequency: {
    isNumber: true
  },
  nativeTyping: {
    isBoolean: true
  },
  simpleIsVisibleCheck: {
    isBoolean: true
  },
  useCarthageSsl: {
    isBoolean: true
  },
  shouldUseSingletonTestManager: {
    isBoolean: true
  },
  isHeadless: {
    isBoolean: true
  },
  useXctestrunFile: {
    isBoolean: true
  },
  absoluteWebLocations: {
    isBoolean: true
  },
  simulatorWindowCenter: {
    isString: true
  },
  useJSONSource: {
    isBoolean: true
  },
  enforceFreshSimulatorCreation: {
    isBoolean: true
  },
  shutdownOtherSimulators: {
    isBoolean: true
  },
  keychainsExcludePatterns: {
    isString: true
  },
  showSafariConsoleLog: {
    isBoolean: true
  },
  showSafariNetworkLog: {
    isBoolean: true
  },
  safariGarbageCollect: {
    isBoolean: true
  },
  safariGlobalPreferences: {
    isObject: true
  },
  safariLogAllCommunication: {
    isBoolean: true
  },
  safariLogAllCommunicationHexDump: {
    isBoolean: true
  },
  safariSocketChunkSize: {
    isNumber: true
  },
  mjpegServerPort: {
    isNumber: true
  },
  reduceMotion: {
    isBoolean: true
  },
  mjpegScreenshotUrl: {
    isString: true
  },
  permissions: {
    isString: true
  },
  screenshotQuality: {
    isNumber: true
  },
  skipLogCapture: {
    isBoolean: true
  },
  wdaEventloopIdleDelay: {
    isNumber: true
  },
  otherApps: {
    isString: true
  },
  includeSafariInWebviews: {
    isBoolean: true
  },
  iosSimulatorLogsPredicate: {
    isString: true
  },
  appPushTimeout: {
    isNumber: true
  }
}, _appiumIosDriver.desiredCapConstraints);

exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXNpcmVkLWNhcHMuanMiXSwibmFtZXMiOlsiUExBVEZPUk1fTkFNRV9JT1MiLCJQTEFURk9STV9OQU1FX1RWT1MiLCJkZXNpcmVkQ2FwQ29uc3RyYWludHMiLCJfIiwiZGVmYXVsdHMiLCJwbGF0Zm9ybU5hbWUiLCJwcmVzZW5jZSIsImlzU3RyaW5nIiwiaW5jbHVzaW9uQ2FzZUluc2Vuc2l0aXZlIiwic2hvd1hjb2RlTG9nIiwiaXNCb29sZWFuIiwid2RhTG9jYWxQb3J0IiwiaXNOdW1iZXIiLCJ3ZGFCYXNlVXJsIiwiaW9zSW5zdGFsbFBhdXNlIiwieGNvZGVDb25maWdGaWxlIiwieGNvZGVPcmdJZCIsInhjb2RlU2lnbmluZ0lkIiwia2V5Y2hhaW5QYXRoIiwia2V5Y2hhaW5QYXNzd29yZCIsImJvb3RzdHJhcFBhdGgiLCJhZ2VudFBhdGgiLCJ0YXBXaXRoU2hvcnRQcmVzc0R1cmF0aW9uIiwic2NhbGVGYWN0b3IiLCJ1c2VQcmVidWlsdFdEQSIsImN1c3RvbVNTTENlcnQiLCJ3ZWJEcml2ZXJBZ2VudFVybCIsImRlcml2ZWREYXRhUGF0aCIsImxhdW5jaFdpdGhJREIiLCJ1c2VOZXdXREEiLCJ3ZGFMYXVuY2hUaW1lb3V0Iiwid2RhQ29ubmVjdGlvblRpbWVvdXQiLCJ1cGRhdGVkV0RBQnVuZGxlSWQiLCJyZXNldE9uU2Vzc2lvblN0YXJ0T25seSIsImNvbW1hbmRUaW1lb3V0cyIsIndkYVN0YXJ0dXBSZXRyaWVzIiwid2RhU3RhcnR1cFJldHJ5SW50ZXJ2YWwiLCJwcmVidWlsZFdEQSIsImNvbm5lY3RIYXJkd2FyZUtleWJvYXJkIiwiY2FsZW5kYXJBY2Nlc3NBdXRob3JpemVkIiwidXNlU2ltcGxlQnVpbGRUZXN0Iiwid2FpdEZvclF1aWVzY2VuY2UiLCJtYXhUeXBpbmdGcmVxdWVuY3kiLCJuYXRpdmVUeXBpbmciLCJzaW1wbGVJc1Zpc2libGVDaGVjayIsInVzZUNhcnRoYWdlU3NsIiwic2hvdWxkVXNlU2luZ2xldG9uVGVzdE1hbmFnZXIiLCJpc0hlYWRsZXNzIiwidXNlWGN0ZXN0cnVuRmlsZSIsImFic29sdXRlV2ViTG9jYXRpb25zIiwic2ltdWxhdG9yV2luZG93Q2VudGVyIiwidXNlSlNPTlNvdXJjZSIsImVuZm9yY2VGcmVzaFNpbXVsYXRvckNyZWF0aW9uIiwic2h1dGRvd25PdGhlclNpbXVsYXRvcnMiLCJrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMiLCJzaG93U2FmYXJpQ29uc29sZUxvZyIsInNob3dTYWZhcmlOZXR3b3JrTG9nIiwic2FmYXJpR2FyYmFnZUNvbGxlY3QiLCJzYWZhcmlHbG9iYWxQcmVmZXJlbmNlcyIsImlzT2JqZWN0Iiwic2FmYXJpTG9nQWxsQ29tbXVuaWNhdGlvbiIsInNhZmFyaUxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wIiwic2FmYXJpU29ja2V0Q2h1bmtTaXplIiwibWpwZWdTZXJ2ZXJQb3J0IiwicmVkdWNlTW90aW9uIiwibWpwZWdTY3JlZW5zaG90VXJsIiwicGVybWlzc2lvbnMiLCJzY3JlZW5zaG90UXVhbGl0eSIsInNraXBMb2dDYXB0dXJlIiwid2RhRXZlbnRsb29wSWRsZURlbGF5Iiwib3RoZXJBcHBzIiwiaW5jbHVkZVNhZmFyaUluV2Vidmlld3MiLCJpb3NTaW11bGF0b3JMb2dzUHJlZGljYXRlIiwiYXBwUHVzaFRpbWVvdXQiLCJpb3NEZXNpcmVkQ2FwQ29uc3RyYWludHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBR0EsTUFBTUEsaUJBQWlCLEdBQUcsS0FBMUI7O0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsTUFBM0I7OztBQUVBLElBQUlDLHFCQUFxQixHQUFHQyxnQkFBRUMsUUFBRixDQUFXO0FBQ3JDQyxFQUFBQSxZQUFZLEVBQUU7QUFDWkMsSUFBQUEsUUFBUSxFQUFFLElBREU7QUFFWkMsSUFBQUEsUUFBUSxFQUFFLElBRkU7QUFHWkMsSUFBQUEsd0JBQXdCLEVBQUUsQ0FBQ1IsaUJBQUQsRUFBb0JDLGtCQUFwQjtBQUhkLEdBRHVCO0FBTXJDUSxF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R0F4TFk7QUEyTHJDOEQsRUFBQUEseUJBQXlCLEVBQUU7QUFDekJqRSxJQUFBQSxRQUFRLEVBQUU7QUFEZSxHQTNMVTtBQThMckNrRSxFQUFBQSxjQUFjLEVBQUU7QUFDZDdELElBQUFBLFFBQVEsRUFBRTtBQURJO0FBOUxxQixDQUFYLEVBaU16QjhELHNDQWpNeUIsQ0FBNUI7OztlQW9NZXhFLHFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cyBhcyBpb3NEZXNpcmVkQ2FwQ29uc3RyYWludHMgfSBmcm9tICdhcHBpdW0taW9zLWRyaXZlcic7XG5cbi8vIFRoZXNlIHBsYXRmb3JtIG5hbWVzIHNob3VsZCBiZSB2YWxpZCBpbiBzaW11bGF0b3IgbmFtZVxuY29uc3QgUExBVEZPUk1fTkFNRV9JT1MgPSAnaU9TJztcbmNvbnN0IFBMQVRGT1JNX05BTUVfVFZPUyA9ICd0dk9TJztcblxubGV0IGRlc2lyZWRDYXBDb25zdHJhaW50cyA9IF8uZGVmYXVsdHMoe1xuICBwbGF0Zm9ybU5hbWU6IHsgLy8gb3ZlcnJpZGVcbiAgICBwcmVzZW5jZTogdHJ1ZSxcbiAgICBpc1N0cmluZzogdHJ1ZSxcbiAgICBpbmNsdXNpb25DYXNlSW5zZW5zaXRpdmU6IFtQTEFURk9STV9OQU1FX0lPUywgUExBVEZPUk1fTkFNRV9UVk9TXVxuICB9LFxuICBzaG93WGNvZGVMb2c6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgd2RhTG9jYWxQb3J0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgd2RhQmFzZVVybDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGlvc0luc3RhbGxQYXVzZToge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHhjb2RlQ29uZmlnRmlsZToge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHhjb2RlT3JnSWQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB4Y29kZVNpZ25pbmdJZDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGtleWNoYWluUGF0aDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGtleWNoYWluUGFzc3dvcmQ6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBib290c3RyYXBQYXRoOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgYWdlbnRQYXRoOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgdGFwV2l0aFNob3J0UHJlc3NEdXJhdGlvbjoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHNjYWxlRmFjdG9yOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgdXNlUHJlYnVpbHRXREE6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgY3VzdG9tU1NMQ2VydDoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHdlYkRyaXZlckFnZW50VXJsOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgZGVyaXZlZERhdGFQYXRoOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgbGF1bmNoV2l0aElEQjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB1c2VOZXdXREE6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgd2RhTGF1bmNoVGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHdkYUNvbm5lY3Rpb25UaW1lb3V0OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgdXBkYXRlZFdEQUJ1bmRsZUlkOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgcmVzZXRPblNlc3Npb25TdGFydE9ubHk6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgY29tbWFuZFRpbWVvdXRzOiB7XG4gICAgLy8gcmVjb2duaXplIHRoZSBjYXAsXG4gICAgLy8gYnV0IHZhbGlkYXRlIGluIHRoZSBkcml2ZXIjdmFsaWRhdGVEZXNpcmVkQ2FwcyBtZXRob2RcbiAgfSxcbiAgd2RhU3RhcnR1cFJldHJpZXM6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICB3ZGFTdGFydHVwUmV0cnlJbnRlcnZhbDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHByZWJ1aWxkV0RBOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGNvbm5lY3RIYXJkd2FyZUtleWJvYXJkOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGNhbGVuZGFyQWNjZXNzQXV0aG9yaXplZDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICB1c2VTaW1wbGVCdWlsZFRlc3Q6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgd2FpdEZvclF1aWVzY2VuY2U6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbWF4VHlwaW5nRnJlcXVlbmN5OiB7XG4gICAgaXNOdW1iZXI6IHRydWVcbiAgfSxcbiAgbmF0aXZlVHlwaW5nOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNpbXBsZUlzVmlzaWJsZUNoZWNrOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHVzZUNhcnRoYWdlU3NsOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNob3VsZFVzZVNpbmdsZXRvblRlc3RNYW5hZ2VyOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGlzSGVhZGxlc3M6IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgdXNlWGN0ZXN0cnVuRmlsZToge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBhYnNvbHV0ZVdlYkxvY2F0aW9uczoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzaW11bGF0b3JXaW5kb3dDZW50ZXI6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICB1c2VKU09OU291cmNlOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGVuZm9yY2VGcmVzaFNpbXVsYXRvckNyZWF0aW9uOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNodXRkb3duT3RoZXJTaW11bGF0b3JzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGtleWNoYWluc0V4Y2x1ZGVQYXR0ZXJuczoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIHNob3dTYWZhcmlDb25zb2xlTG9nOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNob3dTYWZhcmlOZXR3b3JrTG9nOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNhZmFyaUdhcmJhZ2VDb2xsZWN0OiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHNhZmFyaUdsb2JhbFByZWZlcmVuY2VzOiB7XG4gICAgaXNPYmplY3Q6IHRydWVcbiAgfSxcbiAgc2FmYXJpTG9nQWxsQ29tbXVuaWNhdGlvbjoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzYWZhcmlMb2dBbGxDb21tdW5pY2F0aW9uSGV4RHVtcDoge1xuICAgIGlzQm9vbGVhbjogdHJ1ZVxuICB9LFxuICBzYWZhcmlTb2NrZXRDaHVua1NpemU6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICBtanBlZ1NlcnZlclBvcnQ6IHtcbiAgICBpc051bWJlcjogdHJ1ZVxuICB9LFxuICByZWR1Y2VNb3Rpb246IHtcbiAgICBpc0Jvb2xlYW46IHRydWVcbiAgfSxcbiAgbWpwZWdTY3JlZW5zaG90VXJsOiB7XG4gICAgaXNTdHJpbmc6IHRydWVcbiAgfSxcbiAgcGVybWlzc2lvbnM6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBzY3JlZW5zaG90UXVhbGl0eToge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIHNraXBMb2dDYXB0dXJlOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIHdkYUV2ZW50bG9vcElkbGVEZWxheToge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH0sXG4gIG90aGVyQXBwczoge1xuICAgIGlzU3RyaW5nOiB0cnVlXG4gIH0sXG4gIGluY2x1ZGVTYWZhcmlJbldlYnZpZXdzOiB7XG4gICAgaXNCb29sZWFuOiB0cnVlXG4gIH0sXG4gIGlvc1NpbXVsYXRvckxvZ3NQcmVkaWNhdGU6IHtcbiAgICBpc1N0cmluZzogdHJ1ZVxuICB9LFxuICBhcHBQdXNoVGltZW91dDoge1xuICAgIGlzTnVtYmVyOiB0cnVlXG4gIH1cbn0sIGlvc0Rlc2lyZWRDYXBDb25zdHJhaW50cyk7XG5cbmV4cG9ydCB7IGRlc2lyZWRDYXBDb25zdHJhaW50cywgUExBVEZPUk1fTkFNRV9JT1MsIFBMQVRGT1JNX05BTUVfVFZPUyB9O1xuZXhwb3J0IGRlZmF1bHQgZGVzaXJlZENhcENvbnN0cmFpbnRzO1xuIl0sImZpbGUiOiJsaWIvZGVzaXJlZC1jYXBzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
