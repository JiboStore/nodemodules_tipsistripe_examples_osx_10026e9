"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RPC_RESPONSE_TIMEOUT_MS = exports.REMOTE_DEBUGGER_PORT = exports.RemoteDebugger = void 0;

require("source-map-support/register");

var _events = _interopRequireDefault(require("events"));

var _logger = _interopRequireDefault(require("./logger"));

var _appiumBaseDriver = require("appium-base-driver");

var _rpcClientSimulator = _interopRequireDefault(require("./rpc-client-simulator"));

var _messageHandlers = _interopRequireDefault(require("./message-handlers"));

var _helpers = require("./helpers");

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _asyncLock = _interopRequireDefault(require("async-lock"));

let VERSION;

try {
  VERSION = require(_path.default.resolve(__dirname, '..', '..', 'package.json')).version;
} catch (ign) {}

const SELECT_APP_RETRIES = 20;
const SELECT_APP_RETRY_SLEEP_MS = 500;
const REMOTE_DEBUGGER_PORT = 27753;
exports.REMOTE_DEBUGGER_PORT = REMOTE_DEBUGGER_PORT;
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const BLANK_PAGE_URL = 'about:blank';
const RPC_RESPONSE_TIMEOUT_MS = 5000;
exports.RPC_RESPONSE_TIMEOUT_MS = RPC_RESPONSE_TIMEOUT_MS;
const PAGE_READY_TIMEOUT = 5000;
const GARBAGE_COLLECT_TIMEOUT = 5000;
const ACTIVE_APP_CODE = 0;

class RemoteDebugger extends _events.default.EventEmitter {
  constructor(opts = {}) {
    super();

    if (VERSION) {
      _logger.default.info(`Remote Debugger version ${VERSION}`);
    }

    const {
      bundleId,
      platformVersion,
      isSafari = true,
      includeSafari = false,
      useNewSafari = false,
      pageLoadMs,
      host,
      port = REMOTE_DEBUGGER_PORT,
      socketPath,
      pageReadyTimeout = PAGE_READY_TIMEOUT,
      remoteDebugProxy,
      garbageCollectOnExecute = false,
      logFullResponse = false,
      logAllCommunication = false,
      logAllCommunicationHexDump = false,
      socketChunkSize
    } = opts;
    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.isSafari = isSafari;
    this.includeSafari = includeSafari;
    this.useNewSafari = useNewSafari;
    this.pageLoadMs = pageLoadMs;

    _logger.default.debug(`useNewSafari --> ${this.useNewSafari}`);

    this.garbageCollectOnExecute = garbageCollectOnExecute;
    this.host = host;
    this.port = port;
    this.socketPath = socketPath;
    this.remoteDebugProxy = remoteDebugProxy;
    this.pageReadyTimeout = pageReadyTimeout;
    this.logAllCommunication = _lodash.default.isNil(logAllCommunication) ? !!logFullResponse : !!logAllCommunication;
    this.logAllCommunicationHexDump = logAllCommunicationHexDump;
    this.socketChunkSize = socketChunkSize;
    this.skippedApps = [];
    this._lock = new _asyncLock.default();
  }

  setup() {
    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this._navigatingToPage = false;
    this.allowNavigationWithoutReload = false;
    this.specialCbs = {
      '_rpc_reportIdentifier:': _lodash.default.noop,
      '_rpc_forwardGetListing:': this.onPageChange.bind(this),
      '_rpc_reportConnectedApplicationList:': this.onConnectedApplicationList.bind(this),
      '_rpc_applicationConnected:': this.onAppConnect.bind(this),
      '_rpc_applicationDisconnected:': this.onAppDisconnect.bind(this),
      '_rpc_applicationUpdated:': this.onAppUpdate.bind(this),
      '_rpc_reportConnectedDriverList:': this.onConnectedDriverList.bind(this),
      pageLoad: this.pageLoad.bind(this),
      frameDetached: this.frameDetached.bind(this)
    };
    this.rpcClient = null;
  }

  teardown() {
    _logger.default.debug('Cleaning up listeners');

    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;
    this.specialCbs = {};
    this.rpcClient = null;
    this.removeAllListeners(RemoteDebugger.EVENT_PAGE_CHANGE);
    this.removeAllListeners(RemoteDebugger.EVENT_DISCONNECT);
  }

  async connect() {
    this.setup();
    this.rpcClient = new _rpcClientSimulator.default({
      bundleId: this.bundleId,
      platformVersion: this.platformVersion,
      isSafari: this.isSafari,
      host: this.host,
      port: this.port,
      socketPath: this.socketPath,
      specialMessageHandlers: this.specialCbs,
      messageProxy: this.remoteDebugProxy,
      logAllCommunication: this.logAllCommunication,
      logAllCommunicationHexDump: this.logAllCommunicationHexDump
    });
    await this.rpcClient.connect();

    try {
      await this.setConnectionKey();
      return this.appDict || {};
    } catch (err) {
      _logger.default.error(`Error setting connection key: ${err.message}`);

      await this.disconnect();
      throw err;
    }
  }

  async disconnect() {
    if (this.rpcClient) {
      await this.rpcClient.disconnect();
    }

    this.emit(RemoteDebugger.EVENT_DISCONNECT, true);
    this.teardown();
  }

  isConnected() {
    return !!(this.rpcClient && this.rpcClient.isConnected());
  }

  async setConnectionKey() {
    _logger.default.debug('Sending connection key request');

    await this.rpcClient.send('setConnectionKey', {}, false);
  }

  updateAppsWithDict(dict) {
    this.appDict = this.appDict || {};
    let [id, entry] = (0, _helpers.appInfoFromDict)(dict);

    if (this.appDict[id]) {
      entry.pageArray = this.appDict[id].pageArray;
    }

    this.appDict[id] = entry;

    if (_lodash.default.isUndefined(entry.pageArray)) {
      entry.pageArray = (0, _helpers.deferredPromise)();
    }

    if (!this.appIdKey) {
      this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.appDict);
    }
  }

  logApplicationDictionary(apps) {
    function getValueString(key, value) {
      if (_lodash.default.isFunction(value)) {
        return '[Function]';
      }

      if (key === 'pageArray' && !_lodash.default.isArray(value)) {
        return `'Waiting for data'`;
      }

      return JSON.stringify(value);
    }

    _logger.default.debug('Current applications available:');

    for (const [app, info] of _lodash.default.toPairs(apps)) {
      _logger.default.debug(`    Application: '${app}'`);

      for (const [key, value] of _lodash.default.toPairs(info)) {
        if (key === 'pageArray' && Array.isArray(value) && value.length) {
          _logger.default.debug(`        ${key}:`);

          for (const page of value) {
            let prefix = '- ';

            for (const [k, v] of _lodash.default.toPairs(page)) {
              _logger.default.debug(`          ${prefix}${k}: ${JSON.stringify(v)}`);

              prefix = '  ';
            }
          }
        } else {
          const valueString = getValueString(key, value);

          _logger.default.debug(`        ${key}: ${valueString}`);
        }
      }
    }
  }

  async selectApp(currentUrl = null, maxTries = SELECT_APP_RETRIES, ignoreAboutBlankUrl = false) {
    const shouldCheckForTarget = this.rpcClient.shouldCheckForTarget;
    this.rpcClient.shouldCheckForTarget = false;

    try {
      const startTime = process.hrtime();

      _logger.default.debug('Selecting application');

      if (!this.appDict || _lodash.default.isEmpty(this.appDict)) {
        _logger.default.debug('No applications currently connected.');

        return [];
      }

      const {
        appIdKey,
        pageDict
      } = await this.searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl);

      if (!appIdKey || !pageDict) {
        _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
      }

      if (this.appIdKey !== appIdKey) {
        _logger.default.debug(`Received altered app id, updating from '${this.appIdKey}' to '${appIdKey}'`);

        this.appIdKey = appIdKey;
      }

      this.logApplicationDictionary(this.appDict);
      const pageArray = _lodash.default.isEmpty(this.appDict[appIdKey].pageArray) ? (0, _helpers.pageArrayFromDict)(pageDict) : this.appDict[appIdKey].pageArray;

      _logger.default.debug(`Finally selecting app ${this.appIdKey}: ${(0, _helpers.simpleStringify)(pageArray)}`);

      let fullPageArray = [];

      for (const [app, info] of _lodash.default.toPairs(this.appDict)) {
        if (!_lodash.default.isArray(info.pageArray) || info.isActive === ACTIVE_APP_CODE) {
          continue;
        }

        const id = app.replace('PID:', '');

        for (const page of info.pageArray) {
          if (page.url && (!ignoreAboutBlankUrl || page.url !== BLANK_PAGE_URL)) {
            let pageDict = _lodash.default.clone(page);

            pageDict.id = `${id}.${pageDict.id}`;
            fullPageArray.push(pageDict);
          }
        }
      }

      _logger.default.debug(`Selected app after ${(0, _helpers.getElapsedTime)(startTime)}ms`);

      return fullPageArray;
    } finally {
      this.rpcClient.shouldCheckForTarget = shouldCheckForTarget;
    }
  }

  async searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl) {
    const bundleIds = this.includeSafari && !this.isSafari ? [this.bundleId, SAFARI_BUNDLE_ID] : [this.bundleId];

    try {
      return await (0, _asyncbox.retryInterval)(maxTries, SELECT_APP_RETRY_SLEEP_MS, async retryCount => {
        this.logApplicationDictionary(this.appDict);
        const possibleAppIds = (0, _helpers.getPossibleDebuggerAppKeys)(bundleIds, this.appDict);

        _logger.default.debug(`Trying out the possible app ids: ${possibleAppIds.join(', ')} (try #${retryCount + 1} of ${maxTries})`);

        for (const attemptedAppIdKey of possibleAppIds) {
          try {
            if (this.appDict[attemptedAppIdKey].isActive === ACTIVE_APP_CODE) {
              _logger.default.debug(`Skipping app '${attemptedAppIdKey}' because it is not active`);

              continue;
            }

            _logger.default.debug(`Attempting app '${attemptedAppIdKey}'`);

            const [appIdKey, pageDict] = await this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this));

            if (_lodash.default.isEmpty(pageDict)) {
              _logger.default.debug('Empty page dictionary received. Trying again.');

              continue;
            }

            this.appDict[appIdKey].pageArray = (0, _helpers.pageArrayFromDict)(pageDict);
            const result = this.searchForPage(this.appDict, currentUrl, ignoreAboutBlankUrl);

            if (result) {
              return result;
            }

            if (currentUrl) {
              _logger.default.debug(`Received app, but expected url ('${currentUrl}') was not found. Trying again.`);
            } else {
              _logger.default.debug('Received app, but no match was found. Trying again.');
            }
          } catch (err) {
            _logger.default.debug(`Error checking application: '${err.message}'. Retrying connection`);
          }
        }

        retryCount++;
        throw new Error('Failed to find an app to select');
      }, 0);
    } catch (ign) {
      _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
    }
  }

  searchForPage(appsDict, currentUrl = null, ignoreAboutBlankUrl = false) {
    for (const appDict of _lodash.default.values(appsDict)) {
      if (!appDict || appDict.isActive === ACTIVE_APP_CODE || !appDict.pageArray || appDict.pageArray.promise) {
        continue;
      }

      for (const dict of appDict.pageArray) {
        if ((!ignoreAboutBlankUrl || dict.url !== BLANK_PAGE_URL) && (!currentUrl || dict.url === currentUrl || dict.url === `${currentUrl}/`)) {
          return {
            appIdKey: appDict.id,
            pageDict: dict
          };
        }
      }
    }

    return null;
  }

  async selectPage(appIdKey, pageIdKey, skipReadyCheck = false) {
    this.appIdKey = `PID:${appIdKey}`;
    this.pageIdKey = pageIdKey;

    _logger.default.debug(`Selecting page '${pageIdKey}' on app '${this.appIdKey}' and forwarding socket setup`);

    const startTime = process.hrtime();
    await this.rpcClient.selectPage(this.appIdKey, pageIdKey);

    if (!skipReadyCheck && !(await this.checkPageIsReady())) {
      await this.pageUnload();
    }

    _logger.default.debug(`Selected page after ${(0, _helpers.getElapsedTime)(startTime)}ms`);
  }

  async executeAtom(atom, args, frames) {
    if (!this.rpcClient.isConnected()) {
      throw new Error('Remote debugger is not connected');
    }

    _logger.default.debug(`Executing atom '${atom}'`);

    const script = await (0, _helpers.getScriptForAtom)(atom, args, frames);
    const value = await this.execute(script, true);

    _logger.default.debug(`Received result for atom '${atom}' execution: ${_lodash.default.truncate((0, _helpers.simpleStringify)(value), {
      length: _helpers.RESPONSE_LOG_LENGTH
    })}`);

    return value;
  }

  async executeAtomAsync(atom, args, frames) {
    const promiseName = `appiumAsyncExecutePromise${_uuidJs.default.create().toString().replace(/-/g, '')}`;
    let script = `var res, rej;` + `window.${promiseName} = new Promise(function (resolve, reject) {` + `  res = resolve;` + `  rej = reject;` + `});` + `window.${promiseName}.resolve = res;` + `window.${promiseName}.reject = rej;` + `window.${promiseName};`;
    const obj = await this.rpcClient.send('sendJSCommand', {
      command: script,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      returnByValue: false
    });
    const promiseObjectId = obj.result.objectId;
    const asyncCallBack = `function (res) {` + `  window.${promiseName}.resolve(res);` + `  window.${promiseName}Value = res;` + `}`;
    await this.execute((await (0, _helpers.getScriptForAtom)(atom, args, frames, asyncCallBack)));
    let res;
    const subcommandTimeout = 1000;

    try {
      res = await this.rpcClient.send('awaitPromise', {
        promiseObjectId,
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });
    } catch (err) {
      if (!err.message.includes(`'Runtime.awaitPromise' was not found`)) {
        throw err;
      }

      const retryWait = 100;
      const timeout = args.length >= 3 ? args[2] : RPC_RESPONSE_TIMEOUT_MS;
      const retries = parseInt(timeout / retryWait, 10);
      const startTime = process.hrtime();
      res = await (0, _asyncbox.retryInterval)(retries, retryWait, async () => {
        if (await this.executeAtom('execute_script', [`return window.hasOwnProperty('${promiseName}Value');`, [null, null], subcommandTimeout], frames)) {
          return await this.executeAtom('execute_script', [`return window.${promiseName}Value;`, [null, null], subcommandTimeout], frames);
        }

        throw new _appiumBaseDriver.errors.TimeoutError(`Timed out waiting for asynchronous script ` + `result after ${(0, _helpers.getElapsedTime)(startTime)} ms'));`);
      });
    } finally {
      try {
        await this.executeAtom('execute_script', [`delete window.${promiseName};`, [null, null], subcommandTimeout], frames);
      } catch (ign) {}
    }

    return (0, _helpers.convertResult)(res);
  }

  frameDetached() {
    this.emit(RemoteDebugger.EVENT_FRAMES_DETACHED);
  }

  async pageLoad(startPageLoadMs, pageLoadVerifyHook) {
    let timeoutMs = 500;
    let start = startPageLoadMs || Date.now();

    _logger.default.debug('Page loaded, verifying whether ready');

    this.pageLoading = true;

    const verify = async () => {
      this.pageLoadDelay = _appiumSupport.util.cancellableDelay(timeoutMs);

      try {
        await this.pageLoadDelay;
      } catch (err) {
        if (err instanceof _bluebird.default.CancellationError) {
          return;
        }
      }

      if (!this.appIdKey) {
        _logger.default.debug('Not connected to an application. Ignoring page load');

        return;
      }

      if (_lodash.default.isFunction(pageLoadVerifyHook)) {
        await pageLoadVerifyHook();
      }

      const ready = await this.checkPageIsReady();

      if (ready || this.pageLoadMs > 0 && start + this.pageLoadMs < Date.now()) {
        _logger.default.debug('Page is ready');

        this.pageLoading = false;
      } else {
        _logger.default.debug('Page was not ready, retrying');

        await verify();
      }
    };

    await verify();
  }

  cancelPageLoad() {
    _logger.default.debug('Unregistering from page readiness notifications');

    this.pageLoading = false;

    if (this.pageLoadDelay) {
      this.pageLoadDelay.cancel();
    }
  }

  async pageUnload() {
    _logger.default.debug('Page unloading');

    await this.waitForDom();
  }

  async waitForDom(startPageLoadMs, pageLoadVerifyHook) {
    _logger.default.debug('Waiting for dom...');

    await this.pageLoad(startPageLoadMs, pageLoadVerifyHook);
  }

  async checkPageIsReady() {
    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey
    });
    if (errors) throw new Error(errors);

    _logger.default.debug('Checking document readyState');

    const readyCmd = 'document.readyState;';
    let readyState = 'loading';

    try {
      readyState = await _bluebird.default.resolve(this.execute(readyCmd, true)).timeout(this.pageReadyTimeout);
    } catch (err) {
      if (!(err instanceof _bluebird.default.TimeoutError)) {
        throw err;
      }

      _logger.default.debug(`Page readiness check timed out after ${this.pageReadyTimeout}ms`);

      return false;
    }

    _logger.default.debug(`Document readyState is '${readyState}'`);

    return readyState === 'complete';
  }

  async launchSafari() {
    await this.rpcClient.send('launchApplication', {
      bundleId: SAFARI_BUNDLE_ID
    });
  }

  async navToUrl(url, pageLoadVerifyHook) {
    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    if (errors) {
      throw new Error(errors);
    }

    this._navigatingToPage = true;

    try {
      _logger.default.debug(`Navigating to new URL: '${url}'`);

      const waitForFramePromise = this.waitForFrameNavigated();
      await this.rpcClient.send('setUrl', {
        url,
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });

      if (!this.useNewSafari) {
        await _bluebird.default.delay(1000);
      }

      await waitForFramePromise;
      await this.waitForDom(Date.now(), pageLoadVerifyHook);
      await this.rpcClient.send('enableConsole', {
        appIdKey: this.appIdKey,
        pageIdKey: this.pageIdKey
      });
    } finally {
      this._navigatingToPage = false;
    }
  }

  async waitForFrameNavigated() {
    return await new _bluebird.default(async (resolve, reject) => {
      _logger.default.debug('Waiting for frame navigated message...');

      let startMs = Date.now();

      const navEventListener = value => {
        _logger.default.debug(`Frame navigated in ${(Date.now() - startMs) / 1000}s from: ${value}`);

        if (!this.allowNavigationWithoutReload && !this.pageLoading) {
          resolve(value);
        } else {
          _logger.default.debug('Frame navigated but we were warned about it, not ' + 'considering page state unloaded');

          this.allowNavigationWithoutReload = false;
        }

        if (this.navigationDelay) {
          this.navigationDelay.cancel();
        }
      };

      this.rpcClient.setSpecialMessageHandler('Page.frameNavigated', reject, navEventListener);

      if (!this.useNewSafari || this.pageLoadMs >= 0) {
        let timeout = this.useNewSafari ? this.pageLoadMs : 500;
        this.navigationDelay = _appiumSupport.util.cancellableDelay(timeout);

        try {
          await this.navigationDelay;
          navEventListener('timeout');
        } catch (err) {}
      }
    });
  }

  async startTimeline(fn) {
    _logger.default.debug('Starting to record the timeline');

    this.rpcClient.setTimelineEventHandler(fn);
    return await this.rpcClient.send('startTimeline', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async stopTimeline() {
    _logger.default.debug('Stopping to record the timeline');

    await this.rpcClient.send('stopTimeline', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async startConsole(fn) {
    _logger.default.debug('Starting to listen for JavaScript console');

    if (_lodash.default.isFunction(fn)) {
      this.rpcClient.setConsoleLogEventHandler(fn);
    }
  }

  async stopConsole() {
    _logger.default.debug('Stopping to listen for JavaScript console');

    await this.rpcClient.send('disableConsole', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async startNetwork(fn) {
    _logger.default.debug('Starting to listen for network events');

    this.rpcClient.setNetworkLogEventHandler(fn);
    return await this.rpcClient.send('startNetwork', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async stopNetwork() {
    _logger.default.debug('Stopping to listen for network events');

    await this.rpcClient.send('stopNetwork', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
  }

  async execute(command, override) {
    if (this.pageLoading && !override) {
      _logger.default.debug('Trying to execute but page is not loaded.');

      await this.waitForDom();
    }

    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    if (errors) {
      throw new Error(errors);
    }

    if (this.garbageCollectOnExecute) {
      await this.garbageCollect();
    }

    _logger.default.debug(`Sending javascript command: '${_lodash.default.truncate(command, {
      length: 50
    })}'`);

    let res = await this.rpcClient.send('sendJSCommand', {
      command,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
    return (0, _helpers.convertResult)(res);
  }

  async callFunction(objId, fn, args) {
    let errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
    if (errors) throw new Error(errors);

    if (this.garbageCollectOnExecute) {
      await this.garbageCollect();
    }

    _logger.default.debug('Calling javascript function');

    const res = await this.rpcClient.send('callJSFunction', {
      objId,
      fn,
      args,
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });
    return (0, _helpers.convertResult)(res);
  }

  set allowNavigationWithoutReload(allow) {
    this._allowNavigationWithoutReload = allow;
  }

  get allowNavigationWithoutReload() {
    return this._allowNavigationWithoutReload;
  }

  async getCookies(urls) {
    _logger.default.debug('Getting network cookies');

    return await this.rpcClient.send('getCookies', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      urls
    });
  }

  async deleteCookie(cookieName, url) {
    _logger.default.debug(`Deleting cookie '${cookieName}' on '${url}'`);

    return await this.rpcClient.send('deleteCookie', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey,
      cookieName,
      url
    });
  }

  async garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT) {
    _logger.default.debug(`Garbage collecting with ${timeoutMs}ms timeout`);

    const errors = (0, _helpers.checkParams)({
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    });

    if (errors) {
      _logger.default.debug(`Unable to collect garbage at this time`);

      return;
    }

    await _bluebird.default.resolve(this.rpcClient.send('garbageCollect', {
      appIdKey: this.appIdKey,
      pageIdKey: this.pageIdKey
    })).timeout(timeoutMs).then(function gcSuccess() {
      _logger.default.debug(`Garbage collection successful`);
    }).catch(function gcError(err) {
      if (err instanceof _bluebird.default.TimeoutError) {
        _logger.default.debug(`Garbage collection timed out after ${timeoutMs}ms`);
      } else {
        _logger.default.debug(`Unable to collect garbage: ${err.message}`);
      }
    });
  }

  async useAppDictLock(fn) {
    return await this._lock.acquire('appDict', fn);
  }

}

exports.RemoteDebugger = RemoteDebugger;
RemoteDebugger.EVENT_PAGE_CHANGE = 'remote_debugger_page_change';
RemoteDebugger.EVENT_FRAMES_DETACHED = 'remote_debugger_frames_detached';
RemoteDebugger.EVENT_DISCONNECT = 'remote_debugger_disconnect';

for (const [name, handler] of _lodash.default.toPairs(_messageHandlers.default)) {
  RemoteDebugger.prototype[name] = handler;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
